Deque or Double Ended Queue is a generalized version of Queue data structure that allows insert and delete at both ends.
insertFront(): Adds an item at the front of Deque.
deleteFront(): Deletes an item from front of Deque.
insertLast(): Adds an item at the rear of Deque.
deleteLast(): Deletes an item from rear of Deque.

In addition to above operations, following operations are also supported
getFront(): Gets the front item from queue.
getRear(): Gets the last item from queue.
isEmpty(): Checks whether Deque is empty or not.
isFull(): Checks whether Deque is full or not.
Applications of Deque:
Since Deque supports both stack and queue operations, it can be used as both. The Deque data structure supports clockwise and anticlockwise rotations in O(1) time which can be useful in certain applications.
Also, the problems where elements need to be removed and or added both ends can be efficiently solved using Deque.

Below is the implementation of Deque using circulaar array :

#include<iostream> 
using namespace std; 
#define MAX 200 
class Deque 
{ 
    int  arr[MAX]; 
    int  front; 
    int  rear; 
    int  size; 
public : 
    Deque(int size) 
    { 
        front = -1; 
        rear = 0; 
        this->size = size; 
    }
    void  insertfront(int key); 
    void  insertrear(int key); 
    void  deletefront(); 
    void  deleterear(); 
    bool  isFull(); 
    bool  isEmpty(); 
    int  getFront(); 
    int  getRear(); 
}; 
bool Deque::isFull() 
{ 
    return ((front == 0 && rear == size-1)|| 
            front == rear+1); 
} 
bool Deque::isEmpty () 
{ 
    return (front == -1); 
} 
void Deque::insertfront(int key) 
{ 
    // check whether Deque if  full or not 
    if (isFull()) 
    { 
        return; 
    } 
  
    // If queue is initially empty 
    if (front == -1) 
    { 
        front = 0; 
        rear = 0; 
    } 
  
    else if (front == 0) 
        front = size - 1 ; 
  
    else 
        front = front-1; 
    arr[front] = key ; 
}  
void Deque ::insertrear(int key) 
{ 
    if (isFull()) 
    { 
        cout << " Overflow\n " << endl; 
        return; 
    } 
    if (front == -1) 
    { 
        front = 0; 
        rear = 0; 
    } 
    else if (rear == size-1) 
        rear = 0; 
    else
        rear = rear+1; 
    arr[rear] = key ; 
} 
void Deque ::deletefront() 
{ 
    // check whether Deque is empty or not 
    if (isEmpty()) 
    { 
        cout << "Queue Underflow\n" << endl; 
        return ; 
    } 
  
    // Deque has only one element 
    if (front == rear) 
    { 
        front = -1; 
        rear = -1; 
    } 
    else
        if (front == size -1) 
            front = 0; 
  
        else 
            front = front+1; 
} 
void Deque::deleterear() 
{ 
    if (isEmpty()) 
    { 
        cout << " Underflow\n" << endl ; 
        return ; 
}
    if (front == rear) 
    { 
        front = -1; 
        rear = -1; 
    } 
    else if (rear == 0) 
        rear = size-1; 
    else
        rear = rear-1; 
} 
int Deque::getFront() 
{ 
    if (isEmpty()) 
    { 
        cout << " Underflow\n" << endl; 
        return -1 ; 
    } 
    return arr[front]; 
} 
int Deque::getRear() 
{ 
    if(isEmpty() || rear < 0) 
    { 
        cout << " Underflow\n" << endl; 
        return -1 ; 
    } 
    return arr[rear]; 
} 
int main() 
{ 
    Deque dq(5); 
    dq.insertrear(5);
    dq.insertrear(10); 
    cout <<  dq.getRear() << endl; 
    dq.deleterear(); 
    cout << dq.getRear() << endl; 
    dq.insertfront(15);
    cout << dq.getFront() << endl;
    dq.deletefront();
    cout << dq.getFront() << endl; 
    return 0; 
}
